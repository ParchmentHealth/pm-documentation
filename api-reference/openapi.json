{
  "openapi": "3.0.1",
  "info": {
    "title": "Parchment APIs",
    "description": "Parchments API documentation for partner integrations, enabling secure e-prescription services",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.dev.parchmenthealth.io/external"
    },
    {
      "url": "https://api.parchmenthealth.io/external"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/organizations/{organization_id}/users/{user_id}/patients": {
      "post": {
        "description": "Creates a new patient in Parchment",
        "parameters": [
          {
            "name": "x-organization-secret",
            "in": "header",
            "required": true,
            "description": "Organization secret for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "description": "Organization ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Patient data to add to Parchment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPatient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Patient created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                },
                "example": {
                  "success": true,
                  "statusCode": 201,
                  "message": "Patient created successfully",
                  "data": {
                    "external_patient_id": "PARTNER#12345",
                    "parchment_patient_id": "pat_abc123def456",
                    "url": "https://app.parchment.health/dashboard/patients/pat_abc123def456"
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_abc123"
                }
              }
            }
          },
          "202": {
            "description": "Patient creation accepted - conflicts found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                },
                "example": {
                  "success": true,
                  "statusCode": 202,
                  "message": "Patient creation accepted - conflicts found",
                  "data": {
                    "external_patient_id": "PARTNER#12345",
                    "parchment_patient_id": "pat_existing789",
                    "url": "https://app.parchment.health/dashboard/patients/pat_existing789"
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_def456"
                }
              }
            }
          },
          "409": {
            "description": "Partner patient ID conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 409,
                  "error": {
                    "type": "https://parchment.health/errors/partner-patient-id-conflict",
                    "title": "Partner patient ID conflict",
                    "detail": "Partner patient ID 'PARTNER#12345' is already in use by another patient. Please use a unique identifier."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_ghi789"
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 422,
                  "error": {
                    "type": "https://parchment.health/errors/validation-error",
                    "title": "Validation failed",
                    "detail": "There were some problems with your input.",
                    "validation": [
                      {
                        "field": "family_name",
                        "message": "Family name is required",
                        "code": "VALIDATION_ERROR"
                      },
                      {
                        "field": "date_of_birth",
                        "message": "Invalid date format. Use YYYY-MM-DD",
                        "code": "INVALID_FORMAT"
                      }
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_jkl012"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 400,
                  "error": {
                    "type": "https://parchment.health/errors/invalid-request",
                    "title": "Bad request",
                    "detail": "The request could not be processed due to invalid data."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_mno345"
                }
              }
            }
          }
        }
      }
    },
    "/v1/token": {
      "post": {
        "security": [],
        "description": "Generate an access token for API authentication",
        "parameters": [
          {
            "name": "x-partner-id",
            "in": "header",
            "required": true,
            "description": "Partner ID for authentication - provided by Parchment",
            "schema": {
              "type": "string",
              "example": "tacklit"
            }
          },
          {
            "name": "x-partner-secret",
            "in": "header",
            "required": true,
            "description": "Partner secret for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": true,
            "description": "Organization ID for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-organization-secret",
            "in": "header",
            "required": true,
            "description": "Organization secret for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-user-id",
            "in": "header",
            "required": true,
            "description": "User ID for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Token request parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token generation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                },
                "example": {
                  "success": true,
                  "statusCode": 200,
                  "message": "Token generated successfully",
                  "data": {
                    "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtleTEifQ...",
                    "expiresIn": 3600,
                    "tokenType": "Bearer",
                    "scope": ["create:patient", "read:patient_prescription"]
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_pqr678",
                  "meta": {
                    "apiVersion": "1.0",
                    "responseTime": 125
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 400,
                  "error": {
                    "type": "https://parchment.health/errors/invalid-request",
                    "title": "Bad request",
                    "detail": "Invalid grant type or scope provided."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_stu901",
                  "meta": {
                    "apiVersion": "1.0"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 401,
                  "error": {
                    "type": "https://parchment.health/errors/authentication-required",
                    "title": "Unauthorized",
                    "detail": "Invalid partner credentials provided."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_vwx234",
                  "meta": {
                    "apiVersion": "1.0"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organization_id}/validate": {
      "get": {
        "description": "Validate integration token and mark organization as integrated",
        "parameters": [
          {
            "name": "x-organization-secret",
            "in": "header",
            "required": true,
            "description": "Organization secret for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "description": "Organization ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token validation successful and organization marked as integrated",
            "content": {
              "application/json": {
                "example": {
                  "statusCode": 200,
                  "message": "Successfully validated token",
                  "data": null
                }
              }
            }
          },
          "400": {
            "description": "Bad request - deprecated header used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 400,
                  "error": {
                    "type": "https://parchment.health/errors/deprecated-header",
                    "title": "Deprecated header used",
                    "detail": "Please use x-organization-secret instead of x-partner-secret"
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_abc123"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid token, missing credentials, or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalid_token": {
                    "summary": "Invalid or expired token",
                    "value": {
                      "success": false,
                      "statusCode": 401,
                      "error": {
                        "type": "https://parchment.health/errors/authentication-required",
                        "title": "Unauthorized",
                        "detail": "Invalid or expired authentication token"
                      },
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "requestId": "req_1705312200000_def456"
                    }
                  },
                  "missing_secret": {
                    "summary": "Missing organization secret",
                    "value": {
                      "success": false,
                      "statusCode": 401,
                      "error": {
                        "type": "https://parchment.health/errors/authentication-required",
                        "title": "Unauthorized",
                        "detail": "Organization secret is required"
                      },
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "requestId": "req_1705312200000_ghi789"
                    }
                  },
                  "insufficient_scope": {
                    "summary": "Insufficient permissions",
                    "value": {
                      "success": false,
                      "statusCode": 401,
                      "error": {
                        "type": "https://parchment.health/errors/insufficient-scope",
                        "title": "Insufficient permissions",
                        "detail": "Token does not have required CREATE_PATIENT scope"
                      },
                      "timestamp": "2024-01-15T10:30:00.000Z",
                      "requestId": "req_1705312200000_jkl012"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 500,
                  "error": {
                    "type": "https://parchment.health/errors/internal-server-error",
                    "title": "Internal Server Error",
                    "detail": "An unexpected error occurred during validation"
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_mno345"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organization_id}/users/{user_id}/patients/{patient_id}/prescriptions": {
      "get": {
        "description": "Get prescriptions for a specific patient",
        "parameters": [
          {
            "name": "x-organization-secret",
            "in": "header",
            "required": true,
            "description": "Organization secret for authentication - provided by Parchment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of prescriptions to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lastKey",
            "in": "query",
            "required": false,
            "description": "Last key to return",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "description": "Organization ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "description": "Patient ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved prescriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientPrescriptionsExternal"
                },
                "example": {
                  "success": true,
                  "statusCode": 200,
                  "message": "Patient prescriptions retrieved successfully",
                  "data": {
                    "patient": {
                      "given_name": "John",
                      "family_name": "Smith",
                      "date_of_birth": "1990-01-15T00:00:00.000Z",
                      "partner_patient_id": "PARTNER#12345"
                    },
                    "prescriber": {
                      "given_name": "Dr. Emily",
                      "family_name": "Johnson"
                    },
                    "prescriptions": [
                      {
                        "url": "https://egw-etp-int-qrcode-web-au-se.azurewebsites.net/scripts/2F3WFX8J4WQH8T72X9",
                        "scid": "2F3WFX8J4WQH8T72X9",
                        "status": "Active",
                        "created_date": "2025-06-30T00:11:22",
                        "item_name": "Sildenafil 100 mg tablet, 4",
                        "quantity": "4",
                        "number_of_repeats_authorised": "0",
                        "repeat_intervals": "0",
                        "pbs_code": "",
                        "item_strength": "",
                        "item_form": "",
                        "route_administration": "Oral",
                        "pbsdva_authority_number": "0",
                        "phone_approval_authority_number": "",
                        "schedule_number": "S4",
                        "private_prescription": true,
                        "emergency_supply": false,
                        "brand_substitution_not_allowed": false,
                        "reason_for_prescribing": "",
                        "patient_instructions": "xcxc",
                        "doctor_notes": "",
                        "pharmacy_name": "",
                        "regulation_24": false,
                        "controlled_substance_reference": "",
                        "unusual_dose_flag": false,
                        "unusual_qty_flag": false,
                        "my_sl_consent": true,
                        "send_to_pharmacy": "",
                        "unlisted_item_repat_authority": false,
                        "prescriber_script_number": "19192"
                      },
                      {
                        "url": "https://egw-etp-int-qrcode-web-au-se.azurewebsites.net/scripts/2F3WFX8B8K66686MVA",
                        "scid": "2F3WFX8B8K66686MVA",
                        "status": "Ceased",
                        "created_date": "2025-04-17T05:09:02",
                        "item_name": "Oxycodone hydrochloride 20 mg capsule, 20",
                        "quantity": "500",
                        "number_of_repeats_authorised": "0",
                        "repeat_intervals": "0",
                        "pbs_code": "8502L",
                        "item_strength": "",
                        "item_form": "",
                        "route_administration": "Oral",
                        "pbsdva_authority_number": "10074227",
                        "phone_approval_authority_number": "1234567",
                        "schedule_number": "S8",
                        "private_prescription": false,
                        "emergency_supply": false,
                        "brand_substitution_not_allowed": false,
                        "reason_for_prescribing": "",
                        "patient_instructions": "1x am pm",
                        "doctor_notes": "",
                        "pharmacy_name": "",
                        "regulation_24": false,
                        "controlled_substance_reference": "",
                        "unusual_dose_flag": false,
                        "unusual_qty_flag": false,
                        "my_sl_consent": true,
                        "send_to_pharmacy": "",
                        "unlisted_item_repat_authority": false,
                        "prescriber_script_number": "18631"
                      }
                    ]
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_yza567",
                  "pagination": {
                    "count": 1,
                    "hasNext": false,
                    "limit": 50,
                    "offset": 0,
                    "lastKey": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 400,
                  "error": {
                    "type": "https://parchment.health/errors/invalid-request",
                    "title": "Bad request",
                    "detail": "Invalid query parameters provided."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_bcd890",
                  "meta": {
                    "apiVersion": "1.0"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 401,
                  "error": {
                    "type": "https://parchment.health/errors/authentication-required",
                    "title": "Unauthorized",
                    "detail": "Valid authentication token is required."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_efg123"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 403,
                  "error": {
                    "type": "https://parchment.health/errors/insufficient-scope",
                    "title": "Insufficient permissions",
                    "detail": "This operation requires the 'read:patient_prescription' scope."
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_hij456"
                }
              }
            }
          },
          "404": {
            "description": "Patient not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "success": false,
                  "statusCode": 404,
                  "error": {
                    "type": "https://parchment.health/errors/patient-not-found",
                    "title": "Patient not found",
                    "detail": "Patient with the specified ID does not exist.",
                    "instance": "/patients/invalid-id"
                  },
                  "timestamp": "2024-01-15T10:30:00.000Z",
                  "requestId": "req_1705312200000_klm789"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ExternalApiResponse": {
        "type": "object",
        "required": [
          "success",
          "statusCode",
          "message",
          "data",
          "timestamp",
          "requestId"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": true
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "message": {
            "type": "string",
            "description": "Human-readable success message",
            "example": "Success"
          },
          "data": {
            "type": "object",
            "description": "Response payload data"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp of the response",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "requestId": {
            "type": "string",
            "description": "Unique identifier for request tracing",
            "example": "req_1705312200000_abc123"
          },
          "pagination": {
            "type": "object",
            "description": "Pagination information for list operations",
            "properties": {
              "count": {
                "type": "integer",
                "description": "Number of items in current response"
              },
              "hasNext": {
                "type": "boolean",
                "description": "Whether more items are available"
              },
              "limit": {
                "type": "integer",
                "description": "Maximum items per page"
              },
              "offset": {
                "type": "integer",
                "description": "Starting position of current page"
              },
              "lastKey": {
                "type": "string",
                "nullable": true,
                "description": "Opaque cursor for fetching the next page. Use this value as the lastKey query parameter for the next request. If null, no more pages are available"
              }
            }
          }
        }
      },
      "ExternalApiErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "statusCode",
          "error",
          "timestamp",
          "requestId"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": false
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "error": {
            "type": "object",
            "description": "RFC 7807 compliant error details",
            "required": ["type", "title", "detail"],
            "properties": {
              "type": {
                "type": "string",
                "format": "uri",
                "description": "URI identifying the problem type",
                "example": "https://parchment.health/errors/validation-error"
              },
              "title": {
                "type": "string",
                "description": "Human-readable summary of the problem",
                "example": "Validation failed"
              },
              "detail": {
                "type": "string",
                "description": "Human-readable explanation of the problem",
                "example": "There were some problems with your input."
              },
              "instance": {
                "type": "string",
                "format": "uri",
                "description": "URI reference to the specific occurrence",
                "example": "/patients/123"
              },
              "validation": {
                "type": "array",
                "description": "Field-level validation errors (for 422 responses)",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "description": "Field name that failed validation"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation error message"
                    },
                    "code": {
                      "type": "string",
                      "description": "Error code for programmatic handling"
                    }
                  }
                }
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp of the response",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "requestId": {
            "type": "string",
            "description": "Unique identifier for request tracing",
            "example": "req_1705312200000_def456"
          },
          "meta": {
            "type": "object",
            "description": "Additional response metadata",
            "properties": {
              "apiVersion": {
                "type": "string",
                "description": "API version used",
                "example": "1.0"
              }
            }
          }
        }
      },
      "Error": {
        "$ref": "#/components/schemas/ExternalApiErrorResponse"
      },
      "NewPatient": {
        "type": "object",
        "description": "Patient information to be created",
        "required": [
          "family_name",
          "given_name",
          "date_of_birth",
          "sex",
          "partner_patient_id"
        ],
        "properties": {
          "dva_file_number": {
            "type": "string",
            "description": "DVA file number"
          },
          "medicare_card_number": {
            "type": "string",
            "description": "Medicare card number"
          },
          "medicare_irn": {
            "type": "string",
            "description": "Medicare IRN"
          },
          "given_name": {
            "type": "string",
            "description": "Patient's given name",
          },
          "family_name": {
            "type": "string",
            "description": "Patient's family name",
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "description": "Patient's date of birth in YYYY-MM-DD format"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Patient's email address (optional)",
          },
          "phone": {
            "type": "string",
            "description": "Patient's Australian phone number (optional). Must be a valid Australian number with digits only. Supports mobile (04xxxxxxxx) and landline (0[2378]xxxxxxxx) formats. International format with +61 or 61 prefix is also accepted.",
          },
          "australian_street_address": {
            "$ref": "#/components/schemas/australian_street_address"
          },
          "medicare_valid_to": {
            "type": "string",
            "format": "date",
            "description": "Medicare card expiry date"
          },
          "concession_pension_number": {
            "type": "string",
            "description": "Concession or pension number"
          },
          "entitlement_number": {
            "type": "string",
            "description": "Entitlement number"
          },
          "dva_card_color": {
            "$ref": "#/components/schemas/DVA_COLOR"
          },
          "racf_id": {
            "type": "string",
            "description": "RACF identifier"
          },
          "ctg_eligible": {
            "type": "boolean",
            "description": "Closing the Gap eligibility"
          },
          "indigenous_type": {
            "$ref": "#/components/schemas/IndigenousType"
          },
          "partner_patient_id": {
            "type": "string",
            "description": "Partner's unique identifier for the patient",
          },
          "partner_id": {
            "type": "string",
            "description": "Partner's unique identifier for the organization"
          }
        }
      },
      "australian_street_address": {
        "type": "object",
        "required": [
          "street_number",
          "street_name",
          "suburb",
          "state",
          "postcode"
        ],
        "properties": {
          "street_number": {
            "type": "string",
            "description": "Street number",
          },
          "street_name": {
            "type": "string",
            "description": "Street name",
          },
          "suburb": {
            "type": "string",
            "description": "Suburb",
          },
          "state": {
            "$ref": "#/components/schemas/AU_STATE"
          },
          "postcode": {
            "type": "string",
            "description": "Australian postcode (4 digits)",
          }
        }
      },
      "Sex": {
        "type": "string",
        "enum": ["M", "F", "N", "I"],
        "description": "Patient's sex"
      },
      "DVA_COLOR": {
        "type": "string",
        "enum": ["gold", "white", "orange"],
        "description": "DVA card color"
      },
      "IndigenousType": {
        "type": "string",
        "enum": [
          "aboriginal",
          "torres_strait_islander",
          "both",
          "neither",
          "not_stated"
        ],
        "description": "Patient's indigenous status"
      },
      "AU_STATE": {
        "type": "string",
        "enum": ["NSW", "VIC", "QLD", "WA", "SA", "TAS", "ACT", "NT"],
        "description": "Australian state or territory"
      },
      "PatientData": {
        "type": "object",
        "description": "Patient creation response data",
        "required": ["external_patient_id", "parchment_patient_id", "url"],
        "properties": {
          "external_patient_id": {
            "type": "string",
            "description": "Partner's unique identifier for the patient",
            "example": "PARTNER#12345"
          },
          "parchment_patient_id": {
            "type": "string",
            "description": "Parchment's unique identifier for the patient",
            "example": "pat_abc123def456"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the patient in Parchment portal",
            "example": "https://app.parchment.health/dashboard/patients/pat_abc123def456"
          }
        }
      },
      "PatientResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "statusCode": {
                "example": 201
              },
              "message": {
                "example": "Patient created successfully"
              },
              "data": {
                "$ref": "#/components/schemas/PatientData"
              }
            }
          }
        ]
      },
      "TokenRequest": {
        "type": "object",
        "required": ["grantType", "scope"],
        "properties": {
          "grantType": {
            "type": "string",
            "description": "Type of grant for OAuth2 authentication",
            "example": "client_credentials",
            "default": "client_credentials",
            "enum": ["client_credentials"]
          },
          "scope": {
            "type": "array",
            "description": "List of permission scopes being requested",
            "items": {
              "type": "string",
              "enum": [
                "create:patient",
                "read:patient",
                "update:patient",
                "read:patient_prescription",
                "create:user",
                "read:user",
                "update:user",
                "delete:user"
              ]
            },
            "example": ["create:patient", "read:patient_prescription"]
          }
        }
      },
      "TokenData": {
        "type": "object",
        "description": "Authentication token data",
        "required": ["accessToken", "expiresIn", "tokenType", "scope"],
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT token for API authentication",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtleTEifQ..."
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token validity in seconds",
            "example": 3600
          },
          "tokenType": {
            "type": "string",
            "description": "Type of the token",
            "example": "Bearer"
          },
          "scope": {
            "type": "array",
            "description": "List of granted permission scopes",
            "items": {
              "type": "string"
            },
            "example": ["create:patient", "read:patient_prescription"]
          }
        }
      },
      "TokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "statusCode": {
                "example": 200
              },
              "message": {
                "example": "Token generated successfully"
              },
              "data": {
                "$ref": "#/components/schemas/TokenData"
              }
            }
          }
        ]
      },
      "Prescription": {
        "type": "object",
        "properties": {
          "url": { "type": "string", "format": "uri" },
          "scid": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["Active", "Ceased", "Cancelled"],
            "description": "Current status of the prescription"
          },
          "created_date": { "type": "string", "format": "date-time" },
          "item_name": { "type": "string" },
          "quantity": { "type": "string" },
          "number_of_repeats_authorised": { "type": "string" },
          "repeat_intervals": { "type": "string" },
          "pbs_code": { "type": "string" },
          "item_strength": { "type": "string" },
          "item_form": { "type": "string" },
          "route_administration": { "type": "string" },
          "pbsdva_authority_number": { "type": "string" },
          "phone_approval_authority_number": { "type": "string" },
          "schedule_number": { "type": "string" },
          "private_prescription": { "type": "boolean" },
          "emergency_supply": { "type": "boolean" },
          "brand_substitution_not_allowed": { "type": "boolean" },
          "reason_for_prescribing": { "type": "string" },
          "patient_instructions": { "type": "string" },
          "doctor_notes": { "type": "string" },
          "pharmacy_name": { "type": "string" },
          "regulation_24": { "type": "boolean" },
          "controlled_substance_reference": { "type": "string" },
          "unusual_dose_flag": { "type": "boolean" },
          "unusual_qty_flag": { "type": "boolean" },
          "my_sl_consent": { "type": "boolean" },
          "send_to_pharmacy": { "type": "string" },
          "unlisted_item_repat_authority": { "type": "boolean" },
          "prescriber_script_number": { "type": "string" }
        }
      },
      "Patient": {
        "type": "object",
        "properties": {
          "given_name": { "type": "string" },
          "family_name": { "type": "string" },
          "date_of_birth": { "type": "string", "format": "date-time" },
          "partner_patient_id": { "type": "string" }
        }
      },
      "Prescriber": {
        "type": "object",
        "properties": {
          "given_name": { "type": "string" },
          "family_name": { "type": "string" }
        }
      },
      "PatientPrescriptionsData": {
        "type": "object",
        "description": "Patient prescription data",
        "required": ["patient", "prescriber", "prescriptions"],
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/Patient"
          },
          "prescriber": {
            "$ref": "#/components/schemas/Prescriber"
          },
          "prescriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prescription"
            }
          }
        }
      },
      "PatientPrescriptionsExternal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "message": {
                "example": "Prescriptions retrieved successfully"
              },
              "data": {
                "$ref": "#/components/schemas/PatientPrescriptionsData"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
