{
	"info": {
		"_postman_id": "899bf11e-160e-475a-b1d0-afa332f847fe",
		"name": "Parchment External APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15250687",
		"_collection_link": "https://solar-comet-693833.postman.co/workspace/Parchment~520846e6-1adf-4320-81d4-0793e2c85192/collection/15250687-899bf11e-160e-475a-b1d0-afa332f847fe?action=share&source=collection_link&creator=15250687"
	},
	"item": [
		{
			"name": "external-service",
			"item": [
				{
					"name": "Generate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save token to collection variables when successful",
									"if (pm.response.code === 200) {",
									"    const responseBody = pm.response.json();",
									"    const accessToken = responseBody.access_token;",
									"    const expiresIn = responseBody.expires_in || 21600; // Default 6 hours",
									"    const expiry = Math.floor(Date.now() / 1000) + expiresIn;",
									"    ",
									"    pm.collectionVariables.set('accessToken', accessToken);",
									"    pm.collectionVariables.set('tokenExpiry', expiry);",
									"    ",
									"    console.log('Token saved to collection variables');",
									"    console.log('Access Token:', accessToken);",
									"    console.log('Expires at:', new Date(expiry * 1000).toISOString());",
									"} else {",
									"    console.log('Failed to generate token. Status:', pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-organization-id",
								"value": "{{organizationId}}",
								"type": "text"
							},
							{
								"key": "x-organization-secret",
								"value": "{{organizationSecret}}",
								"type": "text"
							},
							{
								"key": "x-partner-secret",
								"value": "{{partnerSecret}}",
								"type": "text"
							},
							{
								"key": "x-partner-id",
								"value": "{{partnerId}}",
								"type": "text"
							},
							{
								"key": "x-user-id",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grantType\": \"client_credentials\",\n    \"scope\": [\"create:patient\", \"read:patient_prescription\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/external/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"external",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-organization-secret",
								"value": "{{organizationSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"given_name\": \"Andria\",\n    \"family_name\": \"van Zyl\",\n    \"medicare_card_number\": \"4950135291\", \n    \"medicare_irn\": \"1\",\n    \"dva_file_number\": \"DVA123456\",\n    \"date_of_birth\": \"1999-02-28\",\n    \"sex\": \"F\",\n    \"no_given_name\": false,\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"0412345678\",\n    \"partner_patient_id\": \"1234567890-1234567890\",\n    \"partner_id\": \"{{partnerId}}\",\n    \"australian_street_address\": {\n      \"street_number\": \"42\",\n      \"street_name\": \"Wallaby Way\",\n      \"suburb\": \"Sydney\",\n      \"state\": \"NSW\",\n      \"postcode\": \"2000\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/external/v1/organizations/{{organizationId}}/users/{{userId}}/patients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"external",
								"v1",
								"organizations",
								"{{organizationId}}",
								"users",
								"{{userId}}",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Patient Prescriptions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-organization-secret",
								"value": "{{organizationSecret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/external/v1/organizations/{{organizationId}}/users/{{userId}}/patients/:patient_id/prescriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"external",
								"v1",
								"organizations",
								"{{organizationId}}",
								"users",
								"{{userId}}",
								"patients",
								":patient_id",
								"prescriptions"
							],
							"variable": [
								{
									"key": "patient_id",
									"value": "",
									"description": "Enter the patient ID here"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Integration",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-organization-secret",
								"value": "{{organizationSecret}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/external/v1/organizations/{{organizationId}}/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"external",
								"v1",
								"organizations",
								"{{organizationId}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJraWQiOiJac0NvcktUWGo3XC9KY09ST2hNWG9kK3ZiN055VW5TWnlnWXRvUENvVjBmaz0iLCJhbGciOiJSUzI1NiJ9.eyJjdXN0b206YWNjZXNzX3JvbGVzIjoicHJvdmlkZXIiLCJzdWIiOiI4ZTFjOWJhYi02NjE0LTQ3MjMtODk4MS04N2M4ZmEwMjZkYWUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY3VzdG9tOm9yZ2FuaXphdGlvbl9pZCI6IjdmYTg0ZDJiLTI2ZDctNGM3MS05YjViLWU1OTFlZmY5N2U3ZCIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMi5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMl9ZMUJiVDV0UVIiLCJjb2duaXRvOnVzZXJuYW1lIjoiOGUxYzliYWItNjYxNC00NzIzLTg5ODEtODdjOGZhMDI2ZGFlIiwib3JpZ2luX2p0aSI6IjJkOTNlYzhkLTBhZTYtNGRjMS05M2QzLTAyMzY4ZmE5OThmZCIsImF1ZCI6IjFkdnYzaHRicDRrc242ZWMxaDdkdnY1cWZpIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3MzIyMzc4MDQsIm5hbWUiOiJkaW1pdHkgZGVubmlzIiwiZXhwIjoxNzMyMjYzMDA0LCJpYXQiOjE3MzIyMzc4MDQsImp0aSI6IjgxZWY0ZGIwLWJiNWQtNDczNi05NGRiLTFhNzQ1OTViYzUxYyIsImVtYWlsIjoidGhlZHNvdXphaG9tZUBnbWFpbC5jb20ifQ.ovWJxoPCO8Q0UPnJIGGnIArJitMzwIHcVaMm3vJUm9MZGGKrpTTKhmjBMZ52ZCWZiCLs2U4-kPtlBWBnoDBU-P0PsgcjgvGtL7YoJ3__yQGH-XHRopO_2LwPVRbXFhhRVd4iHzthB75HZYzPi3qMDif9KRM8KUBxx8meYyOeZ11_w0H_U1P-Y0ayJW_Kfg6eWAnUqn57M5QV2zwG2jTaaXv2A2g3O001IFcpAaPbYftaKEeEFmuba_juYqP2wtTHnbtKCsm8lKnBKJDemfboZxHYkZZ2DaU1J0BnC67nbeUv5u_ft63J1EYGmd36myeNrktRcN5iuxYTtgEGOd4y3Q",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "organizationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "organizationSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "partnerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "partnerSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenExpiry",
			"value": "0",
			"type": "string"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-generate token if needed (not for the Generate Token request itself)",
					"if (pm.info.requestName !== 'Generate Token') {",
					"    const currentTime = Math.floor(Date.now() / 1000);",
					"    const tokenExpiry = pm.collectionVariables.get('tokenExpiry') || 0;",
					"    const accessToken = pm.collectionVariables.get('accessToken');",
					"    ",
					"    // Check if token is missing or expired (with 5 minute buffer)",
					"    if (!accessToken || currentTime >= (tokenExpiry - 300)) {",
					"        console.log('Token missing or expired, generating new token...');",
					"        ",
					"        // Check if required variables are set",
					"        const orgId = pm.collectionVariables.get('organizationId');",
					"        const orgSecret = pm.collectionVariables.get('organizationSecret');",
					"        const partnerId = pm.collectionVariables.get('partnerId');",
					"        const partnerSecret = pm.collectionVariables.get('partnerSecret');",
					"        const userId = pm.collectionVariables.get('userId');",
					"        ",
					"        if (!orgId || !orgSecret || !partnerId || !partnerSecret || !userId) {",
					"            console.log('Missing required credentials. Please set collection variables:');",
					"            console.log('- organizationId');",
					"            console.log('- organizationSecret'); ",
					"            console.log('- partnerId');",
					"            console.log('- partnerSecret');",
					"            console.log('- userId');",
					"            return;",
					"        }",
					"        ",
					"        // Generate token",
					"        const tokenRequest = {",
					"            url: pm.environment.get('baseUrl') + '/external/v1/token',",
					"            method: 'POST',",
					"            header: {",
					"                'Content-Type': 'application/json',",
					"                'x-organization-id': orgId,",
					"                'x-organization-secret': orgSecret,",
					"                'x-partner-id': partnerId,",
					"                'x-partner-secret': partnerSecret,",
					"                'x-user-id': userId",
					"            },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    'grantType': 'client_credentials',",
					"                    'scope': ['create:patient', 'read:patient_prescription']",
					"                })",
					"            }",
					"        };",
					"        ",
					"        pm.sendRequest(tokenRequest, (err, response) => {",
					"            if (err) {",
					"                console.log('Error generating token:', err);",
					"                return;",
					"            }",
					"            ",
					"            if (response.code === 200) {",
					"                const responseBody = response.json();",
					"                const newToken = responseBody.access_token;",
					"                const expiresIn = responseBody.expires_in || 21600; // Default 6 hours",
					"                const newExpiry = Math.floor(Date.now() / 1000) + expiresIn;",
					"                ",
					"                pm.collectionVariables.set('accessToken', newToken);",
					"                pm.collectionVariables.set('tokenExpiry', newExpiry);",
					"                ",
					"                console.log('Token generated successfully');",
					"            } else {",
					"                console.log('Failed to generate token. Status:', response.code);",
					"                console.log('Response:', response.text());",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}